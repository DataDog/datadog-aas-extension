#!/usr/bin/env sh

CURRENT_DIR=$(pwd)

setUpCommonEnv() {
    echo "Creating datadog directory"
    DD_DIR="/home/site/wwwroot/datadog"
    mkdir -p $DD_DIR && cd $DD_DIR || return

    echo "Downloading required datadog binaries"
    DD_BINARIES="https://gist.github.com/jcstorms1/7e73ab0da121f42d1843dac5b75c21cb/raw"
    curl -L $DD_BINARIES/datadog.tar.gz -o datadog.tar.gz || return

    echo "Decompressing files"
    tar -xzf datadog.tar.gz || return
    rm datadog.tar.gz

    echo "Starting trace agent"
    ./trace-agent &
}

setUpNodeEnv() {
    echo "Setting up Datadog tracing for Node"

    setUpCommonEnv || return

    npm install dd-trace || return

    # if any of the above fails, we must not update the NODE_OPTIONS
    export NODE_OPTIONS="--require=$DD_DIR/node_modules/dd-trace/init $NODE_OPTIONS"
}

setUpDotnetEnv() {
    echo "Setting up Datadog tracing for .NET"

    setUpCommonEnv || return

    export CORECLR_ENABLE_PROFILING=1
    export CORECLR_PROFILER={846F5F1C-F9AE-4B07-969E-05C26BC060D8}
    export CORECLR_PROFILER_PATH=/home/datadog-dotnet/datadog/Datadog.Trace.ClrProfiler.Native.so
    export DD_DOTNET_TRACER_HOME=/home/datadog-dotnet/datadog
}

if [ -z "$DD_RUNTIME" ]; then
    echo "Runtime is not set. Skipping Datadog startup"
elif [ "$DD_RUNTIME" = "node" ]; then
    setUpNodeEnv;
elif [ "$DD_RUNTIME" = "dotnet" ]; then
    setUpDotnetEnv;
fi

echo "Executing start command: \"$DD_START_APP\""
cd $CURRENT_DIR
eval "$DD_START_APP"
