#!/usr/bin/env sh

main() {
    # Required to add the AAS metadata 
    export DD_AZURE_APP_SERVICES=1

    CURRENT_DIR=$(pwd)
    echo "Set current directory to $CURRENT_DIR"

    echo "Setting Datadog environment variables"
    setEnvVars

    if [ "$WEBSITE_STACK" = "NODE" ]; then
        echo "Initializing setup for a Node environment"
        setUpNodeEnv;
    elif [ "$WEBSITE_STACK" = "DOTNETCORE" ]; then
        echo "Initializing setup for a .NET environment"
        setUpDotnetEnv;
    fi

    echo "Executing start command: \"$DD_START_APP\""
    cd "$CURRENT_DIR" || return
    eval "$DD_START_APP"
}

setEnvVars() {
    if [ -z "$DD_DIR" ]; then
    DD_DIR="/home/datadog"
    fi

    if [ -z "$DD_BINARIES_URL" ]; then
        DD_BINARIES_URL="https://github.com/DataDog/datadog-aas-extension/releases/download"
    fi

    if [ -z "$DD_AAS_LINUX_VERSION" ]; then
        DD_AAS_LINUX_VERSION="linux-v0.1.3-beta"
    fi

    if [ -z "$DD_TRACE_ENABLED" ]; then
        DD_TRACE_ENABLED="true"
    fi

    if [ -z "$DD_CUSTOM_METRICS_ENABLED" ]; then
        DD_CUSTOM_METRICS_ENABLED="true"
    fi
}

setUpCommonEnv() {
    # Sets up the directory, downloads and installs the required binaries
    echo "Creating Datadog directory"
    mkdir -p $DD_DIR && cd $DD_DIR || return

    if [ "$DD_TRACE_ENABLED" ]; then
        echo "Setting up the trace agent"
        setUpTraceAgent &
    fi

    if [ "$DD_CUSTOM_METRICS_ENABLED" ]; then
        echo "Setting up DogStatsD"
        setUpDogStatsD &
    fi
    
    wait
    echo "Completed Datadog binary installation"
}

setUpNodeEnv() {
    echo "Setting up Datadog tracing for Node"
    setUpCommonEnv &
    setup_ID=$!
    
    echo "Installing Node tracer"
    yarn add dd-trace &
    yarn_ID=$!

    # We ran these in parallel and need to wait for both to complete.
    wait $setup_ID $yarn_ID
    ORIG_NODE_OPTIONS=$NODE_OPTIONS
    export NODE_OPTIONS="--require=$DD_DIR/node_modules/dd-trace/init $ORIG_NODE_OPTIONS"

    # confirm updates to NODE_OPTIONS
    node --help >/dev/null || (export NODE_OPTIONS=$ORIG_NODE_OPTIONS && return)
}

setUpDotnetEnv() {
    echo "Setting up Datadog tracing for .NET"

    setUpCommonEnv || return

    if [ -z "$DD_DOTNET_TRACER_VERSION" ]; then
        DD_DOTNET_TRACER_VERSION=2.19.0
    fi
    
    echo "Using version $DD_DOTNET_TRACER of the .NET tracer"
    DD_DOTNET_TRACER_FILE=datadog-dotnet-apm-${DD_DOTNET_TRACER_VERSION}.tar.gz
    DD_DOTNET_TRACER_URL=https://github.com/DataDog/dd-trace-dotnet/releases/download/v${DD_DOTNET_TRACER_VERSION}/${DD_DOTNET_TRACER_FILE}

    echo "Installing .NET tracer from $DD_DOTNET_TRACER_URL"
    curl_or_log_failure $DD_DOTNET_TRACER_URL $DD_DOTNET_TRACER_FILE

    export CORECLR_ENABLE_PROFILING=1
    export CORECLR_PROFILER={846F5F1C-F9AE-4B07-969E-05C26BC060D8}
    export CORECLR_PROFILER_PATH=${DD_DIR}/Datadog.Trace.ClrProfiler.Native.so
    export DD_DOTNET_TRACER_HOME=${DD_DIR}
}

setUpTraceAgent() {
    REMOTE_TRACE_AGENT=trace-agent-${DD_AAS_LINUX_VERSION}.tar.gz
    LOCAL_TRACE_AGENT="trace-agent"

    check_file_exists_or_curl $REMOTE_TRACE_AGENT $LOCAL_TRACE_AGENT

    echo "Starting trace agent"
    ./trace-agent &
    TRACER_PID=$!
    trap 'kill $TRACER_PID ; exit' INT
}

setUpDogStatsD() {
    curl_or_log_failure "https://gist.github.com/jcstorms1/4856d7be2ae390aa923275c3806be130/raw/48f4dadef6dca0c1066bfcfbf8b56da9ab4f0baf/dogstatsd.gz" "dogstatsd.gz"
    gzip -d dogstatsd.gz
    
    echo "Starting Dogstatsd agent"
    ./dogstatsd start &
}

check_file_exists_or_curl() {
    # $1 is the remote filename on github, eg trace-agent-${DD_AAS_LINUX_VERSION}.tar.gz
    # $2 is the local filename after the script has completed
   
   if [ ! -f $1 ]; then 

        if [ -f $2 ]; then 
            echo "Removing old versions of the $2 binary"
            rm trace-agent* 
        fi

        echo "Downloading required Datadog binaries from $DD_BINARIES_URL/$DD_AAS_LINUX_VERSION/$1"
        curl_or_log_failure $DD_BINARIES_URL/$DD_AAS_LINUX_VERSION/$1 $1
        
    else
        echo "Version $DD_AAS_LINUX_VERSION previously installed for the $2 binary"
    fi
}

curl_or_log_failure() {
    if curl -L --fail "$1" -o "$2"; then echo
            echo "Decompressing files"
            tar -zxf "$2" || return
    else 
        echo "Failed to download the file succesfully from $1."
    fi
}

main