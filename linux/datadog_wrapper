#!/usr/bin/env bash

main() {
    # Required to add the AAS metadata
    export DD_AZURE_APP_SERVICES=1

    echo "Setting application directory as $APP_DIR"
    APP_DIR=$(pwd)

    echo "Setting Datadog environment variables"
    setEnvVars

    echo "Creating and switching to the Datadog directory at $DD_DIR"
    mkdir -p "$DD_DIR" && cd "$DD_DIR" || return

    echo "Getting the required Datadog binaries"
    STARTUP_PIDS=()
    getBinaries
    
    case "$WEBSITE_STACK" in
        "NODE")
            echo "Initializing setup for a Node environment"
            setUpNodeEnv;;
        "DOTNETCORE")
            echo "Initializing setup for a .NET environment"
            setUpDotnetEnv;;
    esac

    for i in "${STARTUP_PIDS[@]}"; do wait "$i"; done
    echo "Completed Datadog setup"
}

setEnvVars() {
    if [ -z "$DD_DIR" ]; then
        DD_DIR="/home/datadog"
    fi

    if [ -z "$DD_BINARIES_URL" ]; then
        DD_BINARIES_URL="https://github.com/DataDog/datadog-aas-extension/releases/download"
    fi

    if [ -z "$DD_AAS_LINUX_VERSION" ]; then
        DD_AAS_LINUX_VERSION="linux-v0.1.4-beta"
    fi

    if [ -z "$DD_TRACE_ENABLED" ]; then
        DD_TRACE_ENABLED="true"
    fi

    if [ -z "$DD_CUSTOM_METRICS_ENABLED" ]; then
        DD_CUSTOM_METRICS_ENABLED="false"
    fi
}

getBinaries() {
    if [ "$DD_TRACE_ENABLED" ]; then
        echo "Setting up the trace agent"
        setUpTraceAgent & STARTUP_PIDS+=($!)
    fi

    if [ "$DD_CUSTOM_METRICS_ENABLED" ]; then
        echo "Setting up DogStatsD"
        setUpDogStatsD & STARTUP_PIDS+=($!)
    fi
}

setUpNodeEnv() {
    echo "Installing Node tracer"
    yarn add dd-trace & yarn_ID=$!

    wait $yarn_ID
    echo "Extending NODE_OPTIONS with dd-trace"
    ORIG_NODE_OPTIONS=$NODE_OPTIONS
    export NODE_OPTIONS="--require=$DD_DIR/node_modules/dd-trace/init $ORIG_NODE_OPTIONS"

    # confirm updates to NODE_OPTIONS
    node --help >/dev/null || (export NODE_OPTIONS="$ORIG_NODE_OPTIONS" && return)
}

setUpDotnetEnv() {
    echo "Setting up Datadog tracing for .NET"

    getBinaries || return

    if [ -z "$DD_DOTNET_TRACER_VERSION" ]; then
        DD_DOTNET_TRACER_VERSION=2.19.0
    fi
    
    echo "Using version $DD_DOTNET_TRACER of the .NET tracer"
    DD_DOTNET_TRACER_FILE=datadog-dotnet-apm-${DD_DOTNET_TRACER_VERSION}.tar.gz
    DD_DOTNET_TRACER_URL=https://github.com/DataDog/dd-trace-dotnet/releases/download/v${DD_DOTNET_TRACER_VERSION}/${DD_DOTNET_TRACER_FILE}

    echo "Installing .NET tracer from $DD_DOTNET_TRACER_URL"
    curl_or_log_failure $DD_DOTNET_TRACER_URL $DD_DOTNET_TRACER_FILE

    export CORECLR_ENABLE_PROFILING=1
    export CORECLR_PROFILER={846F5F1C-F9AE-4B07-969E-05C26BC060D8}
    export CORECLR_PROFILER_PATH=${DD_DIR}/Datadog.Trace.ClrProfiler.Native.so
    export DD_DOTNET_TRACER_HOME=${DD_DIR}
}

setUpTraceAgent() {
    REMOTE_TRACE_AGENT="trace-agent-${DD_AAS_LINUX_VERSION}.tar.gz"
    LOCAL_TRACE_AGENT="trace-agent"

    # Curl for the binaries or skip if the most recent version is already present
    check_file_exists_or_curl "$REMOTE_TRACE_AGENT" "$LOCAL_TRACE_AGENT"

    echo "Starting trace agent"
    ./trace-agent &
    TRACER_PID=$!
    trap 'kill $TRACER_PID ; exit' INT
}

setUpDogStatsD() {
    REMOTE_DOGSTATSD="dogstatsd-${DD_AAS_LINUX_VERSION}.tar.gz"
    LOCAL_DOGSTATSD="dogstatsd"

    check_file_exists_or_curl "$REMOTE_DOGSTATSD" "$LOCAL_DOGSTATSD"
    
    echo "Starting Dogstatsd agent"
    ./dogstatsd start &
    DSD_PID=$!
    trap 'kill $DSD_PID ; exit' INT
}

check_file_exists_or_curl() {
    # We don't want to curl the binary if the same version is already present in AAS
    # $1 is the remote, archived and versioned binary on github, eg trace-agent-${DD_AAS_LINUX_VERSION}.tar.gz
    # $2 is the local binary after it is unarchived
    ARCHIVED_BINARY="$1"
    UNARCHIVED_BINARY="$2"

    if [ ! -f "$ARCHIVED_BINARY" ]; then

        if [ -f "$UNARCHIVED_BINARY" ]; then 
            echo "Removing old versions of the $UNARCHIVED_BINARY binary"
            rm "$UNARCHIVED_BINARY*" 
        fi

        echo "Downloading required Datadog binaries from $DD_BINARIES_URL/$DD_AAS_LINUX_VERSION/$ARCHIVED_BINARY"
        curl_or_log_failure "$DD_BINARIES_URL/$DD_AAS_LINUX_VERSION/$ARCHIVED_BINARY" "$ARCHIVED_BINARY"
    else
        echo "Version $DD_AAS_LINUX_VERSION previously installed for the $UNARCHIVED_BINARY binary"
    fi
}

curl_or_log_failure() {
    # $1 is the URL of the archived binary
    # $2 is the unarchived filename we expect, eg. trace-agent
    ARCHIVED_BINARY_URL="$1"
    ARCHIVED_BINARY="$2"

    if curl -L --fail "$ARCHIVED_BINARY_URL" -o "$ARCHIVED_BINARY"; then echo
            echo "Decompressing $ARCHIVED_BINARY_URL"
            tar -zxf "$ARCHIVED_BINARY" || return
    else 
        echo "Failed to download $ARCHIVED_BINARY succesfully from $ARCHIVED_BINARY_URL."
    fi
}

main
echo "Executing start command: \"$DD_START_APP\""
cd "$APP_DIR" || return
eval "$DD_START_APP"