@model Datadog.Kudu.Helper.Models.DatadogConfigurationModel

@{
    ViewBag.Title = "Configuration";
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>@(ViewBag.Title)</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Env, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Env, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Env, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Service, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Service, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Service, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Version, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Version, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Version, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ApiKey, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ApiKey, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ApiKey, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Site, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Site, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Site, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    @*<script>
        $(function () {

            var maskText = '********************************';
            var sensitiveField = $("#ApiKey");
            var options = {
                onComplete: function (cep) {
                    // alert('CEP Completed!:' + cep);
                    sensitiveField.mask(maskText, options);
                },
                onKeyPress: function (cep, event, currentField, options) {
                    // console.log('A key was pressed!:', cep, ' event: ', event, 'currentField: ', currentField, ' options: ', options);
                },
                onChange: function (cep) {
                    // console.log('cep changed! ', cep);
                    sensitiveField.mask(maskText, options);
                },
                onInvalid: function (val, e, f, invalid, options) {
                    // var error = invalid[0];
                    // console.log("Digit: ", error.v, " is invalid for the position: ", error.p, ". We expect something like: ", error.e);
                }
            };

            sensitiveField.mask(maskText, options);

            sensitiveField.focus(function (e) {
                sensitiveField.unmask();
            });

        });
    </script>*@
}

